--- zm/src/zm_local_camera.cpp	2009-05-17 08:07:18.000000000 -0700
+++ zm-build/src/zm_local_camera.cpp	2009-05-18 15:30:33.000000000 -0700
@@ -25,13 +25,15 @@
 #include <unistd.h>
 #include <sys/mman.h>
 #include <errno.h>
+#include <libv4l2.h>
+#include <libv4l1.h>
 
 static int vidioctl( int fd, int request, void *arg )
 {
     int result = -1;
     do
     {
-        result = ioctl( fd, request, arg );
+        result =v4l2_ioctl( fd, request, arg );
     } while ( result == -1 && errno == EINTR );
     return( result );
 }
@@ -348,7 +350,7 @@
 
     Debug( 3, "Opening video device %s", device.c_str() );
     //if ( (vid_fd = open( device.c_str(), O_RDWR|O_NONBLOCK, 0 )) < 0 )
-    if ( (vid_fd = open( device.c_str(), O_RDWR, 0 )) < 0 )
+    if ( (vid_fd = v4l1_open( device.c_str(), O_RDWR, 0 )) < 0 )
 		Fatal( "Failed to open video device %s: %s", device.c_str(), strerror(errno) );
 
 #ifdef ZM_V4L2
@@ -446,7 +448,7 @@
                 Fatal( "Unable to query video buffer: %s", strerror(errno) );
 
             v4l2_data.buffers[i].length = vid_buf.length;
-            v4l2_data.buffers[i].start = mmap( NULL, vid_buf.length, PROT_READ|PROT_WRITE, MAP_SHARED, vid_fd, vid_buf.m.offset );
+            v4l2_data.buffers[i].start = v4l2_mmap( NULL, vid_buf.length, PROT_READ|PROT_WRITE, MAP_SHARED, vid_fd, vid_buf.m.offset );
 
             if ( v4l2_data.buffers[i].start == MAP_FAILED )
                 Fatal( "Can't map video buffer %d (%d bytes) to memory: %s(%d)", i, vid_buf.length, strerror(errno), errno );
@@ -503,7 +505,7 @@
 
         struct video_picture vid_pic;
         memset( &vid_pic, 0, sizeof(vid_pic) );
-        if ( ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
             Fatal( "Failed to get picture attributes: %s", strerror(errno) );
 
         Debug( 4, "Old P:%d", vid_pic.palette );
@@ -541,7 +543,7 @@
         if ( colour >= 0 ) vid_pic.colour = colour;
         if ( contrast >= 0 ) vid_pic.contrast = contrast;
 
-        if ( ioctl( vid_fd, VIDIOCSPICT, &vid_pic ) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCSPICT, &vid_pic ) < 0 )
         {
             Error( "Failed to set picture attributes: %s", strerror(errno) );
             if ( config.strict_video_config )
@@ -552,7 +554,7 @@
 
         struct video_window vid_win;
         memset( &vid_win, 0, sizeof(vid_win) );
-        if ( ioctl( vid_fd, VIDIOCGWIN, &vid_win) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCGWIN, &vid_win) < 0 )
         {
             Error( "Failed to get window attributes: %s", strerror(errno) );
             exit(-1);
@@ -568,7 +570,7 @@
         vid_win.height = height;
         vid_win.flags &= ~VIDEO_WINDOW_INTERLACE;
 
-        if ( ioctl( vid_fd, VIDIOCSWIN, &vid_win ) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCSWIN, &vid_win ) < 0 )
         {
             Error( "Failed to set window attributes: %s", strerror(errno) );
             if ( config.strict_video_config )
@@ -576,7 +578,7 @@
         }
 
         Debug( 3, "Setting up request buffers" );
-        if ( ioctl( vid_fd, VIDIOCGMBUF, &v4l1_data.frames ) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCGMBUF, &v4l1_data.frames ) < 0 )
             Fatal( "Failed to setup memory: %s", strerror(errno) );
         if ( channel_count > 1 && !config.v4l_multi_buffer )
             v4l1_data.frames.frames = 1;
@@ -586,7 +588,7 @@
 
         Debug( 3, "Setting up %d frame buffers", v4l1_data.frames.frames );
 
-        v4l1_data.bufptr = (unsigned char *)mmap( 0, v4l1_data.frames.size, PROT_READ|PROT_WRITE, MAP_SHARED, vid_fd, 0 );
+        v4l1_data.bufptr = (unsigned char *)v4l1_mmap( 0, v4l1_data.frames.size, PROT_READ|PROT_WRITE, MAP_SHARED, vid_fd, 0 );
         if ( v4l1_data.bufptr == MAP_FAILED )
             Fatal( "Could not mmap video: %s", strerror(errno) );
 
@@ -614,7 +616,7 @@
         struct video_channel vid_src;
         memset( &vid_src, 0, sizeof(vid_src) );
         vid_src.channel = channel;
-        if ( ioctl( vid_fd, VIDIOCGCHAN, &vid_src) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCGCHAN, &vid_src) < 0 )
             Fatal( "Failed to get camera source: %s", strerror(errno) );
 
         Debug( 4, "Old C:%d", vid_src.channel );
@@ -625,14 +627,14 @@
         vid_src.norm = standard;
         vid_src.flags = 0;
         vid_src.type = VIDEO_TYPE_CAMERA;
-        if ( ioctl( vid_fd, VIDIOCSCHAN, &vid_src ) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCSCHAN, &vid_src ) < 0 )
         {
             Error( "Failed to set camera source %d: %s", channel, strerror(errno) );
             if ( config.strict_video_config )
                 exit(-1);
         }
 
-        if ( ioctl( vid_fd, VIDIOCGWIN, &vid_win) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCGWIN, &vid_win) < 0 )
             Fatal( "Failed to get window data: %s", strerror(errno) );
 
         Debug( 4, "New X:%d", vid_win.x );
@@ -640,7 +642,7 @@
         Debug( 4, "New W:%d", vid_win.width );
         Debug( 4, "New H:%d", vid_win.height );
         
-        if ( ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
             Fatal( "Failed to get window data: %s", strerror(errno) );
 
         Debug( 4, "New P:%d", vid_pic.palette );
@@ -703,7 +705,7 @@
 
         Debug( 3, "Unmapping video buffers" );
         for ( int i = 0; i < v4l2_data.reqbufs.count; i++ )
-            if ( munmap( v4l2_data.buffers[i].start, v4l2_data.buffers[i].length ) < 0 )
+            if ( v4l2_munmap( v4l2_data.buffers[i].start, v4l2_data.buffers[i].length ) < 0 )
                 Error( "Failed to munmap buffer %d: %s", i, strerror(errno) );
     }
     else
@@ -711,13 +713,13 @@
     if ( v4l_version == 1 )
     {
         Debug( 3, "Unmapping video buffers" );
-	    if ( munmap((char*)v4l1_data.bufptr, v4l1_data.frames.size) < 0 )
+	    if ( v4l1_munmap((char*)v4l1_data.bufptr, v4l1_data.frames.size) < 0 )
 		    Error( "Failed to munmap buffers: %s", strerror(errno) );
 
 	    delete[] v4l1_data.buffers;
     }
 
-	close( vid_fd );
+	v4l1_close( vid_fd );
 }
 
 #define capString(test,prefix,yesString,noString,capability) \
@@ -735,7 +737,7 @@
             strcpy( queryDevice, device );
         else
             sprintf( queryDevice, "/dev/video%d", devIndex );
-        if ( (vid_fd = open(queryDevice, O_RDWR)) <= 0 )
+        if ( (vid_fd = v4l1_open(queryDevice, O_RDWR)) <= 0 )
         {
             if ( device )
             {
@@ -1023,7 +1025,7 @@
 #endif // ZM_V4L2
         {
             struct video_capability vid_cap;
-            if ( ioctl( vid_fd, VIDIOCGCAP, &vid_cap ) < 0 )
+            if (v4l1_ioctl( vid_fd, VIDIOCGCAP, &vid_cap ) < 0 )
             {
                 Error( "Failed to get video capabilities: %s", strerror(errno) );
                 if ( verbose )
@@ -1072,7 +1074,7 @@
             }
 
             struct video_window vid_win;
-            if ( ioctl( vid_fd, VIDIOCGWIN, &vid_win ) < 0 )
+            if (v4l1_ioctl( vid_fd, VIDIOCGWIN, &vid_win ) < 0 )
             {
                 Error( "Failed to get window attributes: %s", strerror(errno) );
                 if ( verbose )
@@ -1098,7 +1100,7 @@
             }
 
             struct video_picture vid_pic;
-            if ( ioctl( vid_fd, VIDIOCGPICT, &vid_pic ) < 0 )
+            if (v4l1_ioctl( vid_fd, VIDIOCGPICT, &vid_pic ) < 0 )
             {
                 Error( "Failed to get picture attributes: %s", strerror(errno) );
                 if ( verbose )
@@ -1152,7 +1154,7 @@
             {
                 struct video_channel vid_src;
                 vid_src.channel = chan;
-                if ( ioctl( vid_fd, VIDIOCGCHAN, &vid_src ) < 0 )
+                if (v4l1_ioctl( vid_fd, VIDIOCGCHAN, &vid_src ) < 0 )
                 {
                     Error( "Failed to get channel %d attributes: %s", chan, strerror(errno) );
                     if ( verbose )
@@ -1193,7 +1195,7 @@
             if ( !verbose )
                 output[strlen(output)-1] = '\n';
         }
-        close( vid_fd );
+        v4l1_close( vid_fd );
         if ( device )
             break;
     }
@@ -1241,7 +1243,7 @@
     if ( v4l_version == 1 )
     {
         struct video_picture vid_pic;
-        if ( ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
         {
             Error( "Failed to get picture attributes: %s", strerror(errno) );
             return( -1 );
@@ -1250,7 +1252,7 @@
         if ( p_brightness >= 0 )
         {
             vid_pic.brightness = p_brightness;
-            if ( ioctl( vid_fd, VIDIOCSPICT, &vid_pic ) < 0 )
+            if (v4l1_ioctl( vid_fd, VIDIOCSPICT, &vid_pic ) < 0 )
             {
                 Error( "Failed to set picture attributes: %s", strerror(errno) );
                 return( -1 );
@@ -1298,7 +1300,7 @@
     if ( v4l_version == 1 )
     {
         struct video_picture vid_pic;
-        if ( ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
         {
             Error( "Failed to get picture attributes: %s", strerror(errno) );
             return( -1 );
@@ -1307,7 +1309,7 @@
         if ( p_hue >= 0 )
         {
             vid_pic.hue = p_hue;
-            if ( ioctl( vid_fd, VIDIOCSPICT, &vid_pic ) < 0 )
+            if (v4l1_ioctl( vid_fd, VIDIOCSPICT, &vid_pic ) < 0 )
             {
                 Error( "Failed to set picture attributes: %s", strerror(errno) );
                 return( -1 );
@@ -1355,7 +1357,7 @@
     if ( v4l_version == 1 )
     {
         struct video_picture vid_pic;
-        if ( ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
         {
             Error( "Failed to get picture attributes: %s", strerror(errno) );
             return( -1 );
@@ -1364,7 +1366,7 @@
         if ( p_colour >= 0 )
         {
             vid_pic.colour = p_colour;
-            if ( ioctl( vid_fd, VIDIOCSPICT, &vid_pic ) < 0 )
+            if (v4l1_ioctl( vid_fd, VIDIOCSPICT, &vid_pic ) < 0 )
             {
                 Error( "Failed to set picture attributes: %s", strerror(errno) );
                 return( -1 );
@@ -1412,7 +1414,7 @@
     if ( v4l_version == 1 )
     {
         struct video_picture vid_pic;
-        if ( ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
+        if (v4l1_ioctl( vid_fd, VIDIOCGPICT, &vid_pic) < 0 )
         {
             Error( "Failed to get picture attributes: %s", strerror(errno) );
             return( -1 );
@@ -1421,7 +1423,7 @@
         if ( p_contrast >= 0 )
         {
             vid_pic.contrast = p_contrast;
-            if ( ioctl( vid_fd, VIDIOCSPICT, &vid_pic ) < 0 )
+            if (v4l1_ioctl( vid_fd, VIDIOCSPICT, &vid_pic ) < 0 )
             {
                 Error( "Failed to set picture attributes: %s", strerror(errno) );
                 return( -1 );
@@ -1469,7 +1471,7 @@
         for ( int frame = 0; frame < v4l1_data.frames.frames; frame++ )
         {
             Debug( 3, "Queueing frame %d", frame );
-            if ( ioctl( vid_fd, VIDIOCMCAPTURE, &v4l1_data.buffers[frame] ) < 0 )
+            if (v4l1_ioctl( vid_fd, VIDIOCMCAPTURE, &v4l1_data.buffers[frame] ) < 0 )
             {
                 Error( "Capture failure for frame %d: %s", frame, strerror(errno) );
                 return( -1 );
@@ -1547,7 +1549,7 @@
             while ( captures_per_frame )
             {
                 Debug( 3, "Syncing frame %d", v4l1_data.active_frame );
-                if ( ioctl( vid_fd, VIDIOCSYNC, &v4l1_data.active_frame ) < 0 )
+                if (v4l1_ioctl( vid_fd, VIDIOCSYNC, &v4l1_data.active_frame ) < 0 )
                 {
                     Error( "Sync failure for frame %d buffer %d: %s", v4l1_data.active_frame, captures_per_frame, strerror(errno) );
                     return( -1 );
@@ -1556,7 +1558,7 @@
                 if ( captures_per_frame )
                 {
                     Debug( 3, "Capturing frame %d", v4l1_data.active_frame );
-                    if ( ioctl( vid_fd, VIDIOCMCAPTURE, &v4l1_data.buffers[v4l1_data.active_frame] ) < 0 )
+                    if (v4l1_ioctl( vid_fd, VIDIOCMCAPTURE, &v4l1_data.buffers[v4l1_data.active_frame] ) < 0 )
                     {
                         Error( "Capture failure for buffer %d (%d): %s", v4l1_data.active_frame, captures_per_frame, strerror(errno) );
                         return( -1 );
@@ -1925,7 +1927,7 @@
                 struct video_channel vid_src;
                 memset( &vid_src, 0, sizeof(vid_src) );
                 vid_src.channel = channel;
-                if ( ioctl( vid_fd, VIDIOCGCHAN, &vid_src) < 0 )
+                if (v4l1_ioctl( vid_fd, VIDIOCGCHAN, &vid_src) < 0 )
                 {
                     Error( "Failed to get camera source %d: %s", channel, strerror(errno) );
                     return(-1);
@@ -1935,14 +1937,14 @@
                 vid_src.norm = standards[next_channel];
                 vid_src.flags = 0;
                 vid_src.type = VIDEO_TYPE_CAMERA;
-                if ( ioctl( vid_fd, VIDIOCSCHAN, &vid_src ) < 0 )
+                if (v4l1_ioctl( vid_fd, VIDIOCSCHAN, &vid_src ) < 0 )
                 {
                     Error( "Failed to set camera source %d: %s", channel, strerror(errno) );
                     return( -1 );
                 }
             }
             Debug( 3, "Requeueing frame %d", v4l1_data.active_frame );
-            if ( ioctl( vid_fd, VIDIOCMCAPTURE, &v4l1_data.buffers[v4l1_data.active_frame] ) < 0 )
+            if (v4l1_ioctl( vid_fd, VIDIOCMCAPTURE, &v4l1_data.buffers[v4l1_data.active_frame] ) < 0 )
             {
                 Error( "Capture failure for frame %d: %s", v4l1_data.active_frame, strerror(errno) );
                 return( -1 );
